import 'package:flutter/material.dart';
import '../models/achievement_model.dart';
import '../services/achievement_service.dart';

class AchievementProvider extends ChangeNotifier {
  List<AchievementModel> _achievements = [];
  List<AchievementModel> _filteredAchievements = [];
  bool _isLoading = false;
  String? _error;
  AchievementType? _selectedType;
  bool _showStats = true;

  // Getters
  List<AchievementModel> get achievements => _achievements;
  List<AchievementModel> get filteredAchievements => _filteredAchievements;
  bool get isLoading => _isLoading;
  String? get error => _error;
  AchievementType? get selectedType => _selectedType;
  bool get showStats => _showStats;

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> loadUserAchievements() async {
    _setLoading(true);
    try {
      _achievements = await AchievementService.getUserAchievements();
      _filteredAchievements = _achievements;
      _error = null;
    } catch (e) {
      _error = e.toString();
    } finally {
      _setLoading(false);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Future<void> loadAllAchievements() async {
    _setLoading(true);
    try {
      _achievements = await AchievementService.getAllAchievements();
      _filteredAchievements = _achievements;
      _error = null;
    } catch (e) {
      _error = e.toString();
    } finally {
      _setLoading(false);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã achievement_types
  Future<void> loadAchievementsFromTypesTable() async {
    _setLoading(true);
    try {
      print('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã achievement_types...');
      _achievements = await AchievementService.getAchievementsFromTypesTable();
      print('–ü–æ–ª—É—á–µ–Ω–æ ${_achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      _filteredAchievements = _achievements;
      _error = null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      if (_achievements.isNotEmpty) {
        print('–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:');
        for (final achievement in _achievements) {
          print('- ${achievement.title} (${achievement.icon})');
        }
      } else {
        print('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—É—Å—Ç!');
      }
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
      _error = e.toString();
      // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
      _achievements = [];
      _filteredAchievements = [];
    } finally {
      _setLoading(false);
      notifyListeners();
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UUID
  Future<void> loadUserAchievementsByUuid(String userUuid) async {
    _setLoading(true);
    try {
      print('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userUuid...');
      final userAchievements = await AchievementService.getUserAchievementsByUuid(userUuid);
      print('–ü–æ–ª—É—á–µ–Ω–æ ${userAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      _updateAchievementsUnlockStatus(userAchievements);
      
      _error = null;
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      _error = e.toString();
    } finally {
      _setLoading(false);
      notifyListeners();
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  void _updateAchievementsUnlockStatus(List<AchievementModel> userAchievements) {
    print('–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è ${userAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    print('–í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${_achievements.length}');
    
    // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ UUID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    final Map<String, AchievementModel> userAchievementsMap = {
      for (var achievement in userAchievements) achievement.uuid: achievement
    };
    
    print('UUID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userAchievementsMap.keys.toList()}');
    
    int unlockedCount = 0;
    int lockedCount = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    for (int i = 0; i < _achievements.length; i++) {
      final achievement = _achievements[i];
      print('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.title} (UUID: ${achievement.uuid})');
      
      if (userAchievementsMap.containsKey(achievement.uuid)) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        final userAchievement = userAchievementsMap[achievement.uuid]!;
        _achievements[i] = achievement.copyWith(
          isUnlocked: true,
          currentValue: userAchievement.currentValue,
          unlockedAt: userAchievement.unlockedAt,
        );
        unlockedCount++;
        print('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.title}');
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        _achievements[i] = achievement.copyWith(
          isUnlocked: false,
          currentValue: 0,
          unlockedAt: null,
        );
        lockedCount++;
        print('üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.title}');
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    _filteredAchievements = _achievements;
    
    print('–°—Ç–∞—Ç—É—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: $unlockedCount —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, $lockedCount –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    notifyListeners();
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ UUID —Ç–∏–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Future<void> loadAchievementsByTypeUuid(String achievementTypeUuid) async {
    _setLoading(true);
    try {
      print('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ —Å UUID: $achievementTypeUuid...');
      _achievements = await AchievementService.getAchievementsByTypeUuid(achievementTypeUuid);
      print('–ü–æ–ª—É—á–µ–Ω–æ ${_achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–∞ $achievementTypeUuid');
      _filteredAchievements = _achievements;
      _error = null;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ UUID —Ç–∏–ø–∞: $e');
      _error = e.toString();
      // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
      _achievements = [];
      _filteredAchievements = [];
    } finally {
      _setLoading(false);
      notifyListeners();
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<List<Map<String, dynamic>>> loadAchievementTypes() async {
    try {
      print('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');
      final types = await AchievementService.getAchievementTypes();
      print('–ü–æ–ª—É—á–µ–Ω–æ ${types.length} —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      return types;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
      _error = e.toString();
      notifyListeners();
      rethrow;
    }
  }

  

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Future<void> updateAchievementProgress(String achievementId, int newValue) async {
    try {
      final updatedAchievement = await AchievementService.updateAchievementProgress(
        achievementId,
        newValue,
      );
      
      final index = _achievements.indexWhere((a) => a.uuid == achievementId);
      if (index != -1) {
        _achievements[index] = updatedAchievement;
        _applyFilters();
        notifyListeners();
      }
    } catch (e) {
      _error = e.toString();
      notifyListeners();
    }
  }

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
  Future<void> unlockAchievement(String achievementId) async {
    try {
      final unlockedAchievement = await AchievementService.unlockAchievement(achievementId);
      
      final index = _achievements.indexWhere((a) => a.uuid == achievementId);
      if (index != -1) {
        _achievements[index] = unlockedAchievement;
        _applyFilters();
        notifyListeners();
      }
    } catch (e) {
      _error = e.toString();
      notifyListeners();
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
  void setSelectedType(AchievementType? type) {
    _selectedType = type;
    _applyFilters();
    notifyListeners();
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  void toggleStats() {
    _showStats = !_showStats;
    notifyListeners();
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
  void _applyFilters() {
    if (_selectedType == null) {
      _filteredAchievements = _achievements;
    } else {
      _filteredAchievements = _achievements
          .where((achievement) => achievement.type == _selectedType)
          .toList();
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É
  List<AchievementModel> getAchievementsByType(AchievementType type) {
    return _achievements.where((achievement) => achievement.type == type).toList();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
  Map<AchievementType, int> getTypeCounts() {
    final Map<AchievementType, int> counts = {};
    for (final type in AchievementType.values) {
      counts[type] = _achievements.where((a) => a.type == type).length;
    }
    return counts;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  List<AchievementModel> getUnlockedAchievements() {
    return _achievements.where((achievement) => achievement.isUnlocked).toList();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  List<AchievementModel> getLockedAchievements() {
    return _achievements.where((achievement) => !achievement.isUnlocked).toList();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –±–ª–∏–∑–∫–∏–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
  List<AchievementModel> getNearCompletionAchievements() {
    return _achievements.where((achievement) => achievement.isNearCompletion).toList();
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
  void clearError() {
    _error = null;
    notifyListeners();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Future<void> refreshAchievements() async {
    await loadAchievementsFromTypesTable();
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å mock –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  Future<void> loadMockAchievements() async {
    _setLoading(true);
    try {
      print('–ó–∞–≥—Ä—É–∂–∞–µ–º mock –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...');
      _achievements = [
        // –û–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        AchievementModel(
          uuid: '1',
          title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
          description: '–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É',
          category: '–û–±—â–∏–µ',
          type: AchievementType.general,
          targetValue: 1,
          currentValue: 0,
          isUnlocked: false,
          rewardDescription: '–ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç',
          unlockedAt: null,
          createdAt: DateTime.now(),
          icon: '‚≠ê',
        ),
        AchievementModel(
          uuid: '2',
          title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
          description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
          category: '–û–±—â–∏–µ',
          type: AchievementType.general,
          targetValue: 1,
          currentValue: 1,
          isUnlocked: true,
          rewardDescription: '–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º',
          unlockedAt: DateTime.now(),
          createdAt: DateTime.now(),
          icon: '‚úÖ',
        ),
        
        // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        AchievementModel(
          uuid: '3',
          title: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
          description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
          category: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          type: AchievementType.training,
          targetValue: 1,
          currentValue: 0,
          isUnlocked: false,
          rewardDescription: '–û–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
          unlockedAt: null,
          createdAt: DateTime.now(),
          icon: 'üí™',
        ),
        AchievementModel(
          uuid: '4',
          title: '–ù–µ–¥–µ–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
          description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
          category: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          type: AchievementType.training,
          targetValue: 7,
          currentValue: 3,
          isUnlocked: false,
          rewardDescription: '–ë–æ–Ω—É—Å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏',
          unlockedAt: null,
          createdAt: DateTime.now(),
          icon: 'üìÖ',
        ),
        
        // –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        AchievementModel(
          uuid: '5',
          title: '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ',
          description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
          category: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
          type: AchievementType.exercise,
          targetValue: 10,
          currentValue: 6,
          isUnlocked: false,
          rewardDescription: '–û–ø—ã—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
          unlockedAt: null,
          createdAt: DateTime.now(),
          icon: 'üèÉ',
        ),
        AchievementModel(
          uuid: '6',
          title: '–ú–∞—Å—Ç–µ—Ä —Ç–µ—Ö–Ω–∏–∫–∏',
          description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π',
          category: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
          type: AchievementType.exercise,
          targetValue: 100,
          currentValue: 75,
          isUnlocked: false,
          rewardDescription: '–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏',
          unlockedAt: null,
          createdAt: DateTime.now(),
          icon: 'üéØ',
        ),
        
        // –°—Ç—Ä–µ–∂
        AchievementModel(
          uuid: '7',
          title: '–ù–∞—á–∞–ª–æ –ø—É—Ç–∏',
          description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥',
          category: '–°—Ç—Ä–µ–∂',
          type: AchievementType.streak,
          targetValue: 3,
          currentValue: 2,
          isUnlocked: false,
          rewardDescription: '–ë–æ–Ω—É—Å –º–æ—Ç–∏–≤–∞—Ü–∏–∏',
          unlockedAt: null,
          createdAt: DateTime.now(),
          icon: 'üî•',
        ),
        
        // –í—Ä–µ–º—è
        AchievementModel(
          uuid: '8',
          title: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
          description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 30 –º–∏–Ω—É—Ç –ø–æ–¥—Ä—è–¥',
          category: '–í—Ä–µ–º—è',
          type: AchievementType.time,
          targetValue: 30,
          currentValue: 25,
          isUnlocked: false,
          rewardDescription: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏',
          unlockedAt: null,
          createdAt: DateTime.now(),
          icon: '‚è±Ô∏è',
        ),
        
        // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
        AchievementModel(
          uuid: '9',
          title: '–ö–æ–º–∞–Ω–¥–∞',
          description: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ',
          category: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
          type: AchievementType.social,
          targetValue: 1,
          currentValue: 0,
          isUnlocked: false,
          rewardDescription: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã',
          unlockedAt: null,
          createdAt: DateTime.now(),
          icon: 'üë•',
        ),
      ];
      print('–ü–æ–ª—É—á–µ–Ω–æ ${_achievements.length} mock –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      _filteredAchievements = _achievements;
      _error = null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mock –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      if (_achievements.isNotEmpty) {
        print('Mock –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:');
        for (final achievement in _achievements) {
          print('- ${achievement.title} (${achievement.icon}) - ${achievement.category}');
        }
      } else {
        print('–°–ø–∏—Å–æ–∫ mock –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—É—Å—Ç!');
      }
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ mock –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
      _error = e.toString();
      _achievements = [];
      _filteredAchievements = [];
    } finally {
      _setLoading(false);
      notifyListeners();
    }
  }
}

