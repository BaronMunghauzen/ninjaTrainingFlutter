import 'package:flutter/material.dart';
import '../../services/api_service.dart';
import 'dart:async'; // Added for Timer

class ExerciseReferenceSelector extends StatefulWidget {
  final void Function(Map<String, dynamic>?) onSelected;
  final String label;
  final Map<String, dynamic> Function(String search)? buildQueryParams;
  final String? initialCaption;
  final Map<String, dynamic>? initialValue;
  final String? endpoint;

  const ExerciseReferenceSelector({
    super.key,
    required this.onSelected,
    this.label = '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞',
    this.buildQueryParams,
    this.initialCaption,
    this.initialValue,
    this.endpoint,
  });

  @override
  State<ExerciseReferenceSelector> createState() =>
      _ExerciseReferenceSelectorState();
}

class _ExerciseReferenceSelectorState extends State<ExerciseReferenceSelector> {
  final TextEditingController _controller = TextEditingController();
  List<Map<String, dynamic>> _options = [];
  bool _isLoading = false;
  Map<String, dynamic>? _selected;
  bool _showDropdown = false;
  Timer? _debounceTimer;
  OverlayEntry? _overlayEntry;
  final LayerLink _layerLink = LayerLink();

  @override
  void initState() {
    super.initState();
    if (widget.initialCaption != null) {
      _controller.text = widget.initialCaption!;
    }
    if (widget.initialValue != null) {
      _selected = widget.initialValue;
    }
    // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  }

  @override
  void dispose() {
    _debounceTimer?.cancel();
    _removeOverlay();
    super.dispose();
  }

  void _removeOverlay() {
    _overlayEntry?.remove();
    _overlayEntry = null;
  }

  void _showOverlay() {
    _removeOverlay();

    if (_options.isEmpty) return;

    _overlayEntry = OverlayEntry(
      builder: (context) => Positioned(
        width: MediaQuery.of(context).size.width - 32, // –£—á–∏—Ç—ã–≤–∞–µ–º padding
        child: CompositedTransformFollower(
          link: _layerLink,
          showWhenUnlinked: false,
          offset: const Offset(0, 10), // –ü–æ–¥–Ω–∏–º–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã—à–µ
          child: Material(
            elevation: 8,
            borderRadius: BorderRadius.circular(8),
            child: Container(
              constraints: const BoxConstraints(maxHeight: 200),
              decoration: BoxDecoration(
                color: Colors.grey[900], // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.grey.shade600),
              ),
              child: ListView.builder(
                shrinkWrap: true,
                itemCount: _options.length,
                itemBuilder: (context, i) {
                  final ex = _options[i];
                  print(
                    'üîç ExerciseReferenceSelector: –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ $i: ${ex['caption']}',
                  );
                  return ListTile(
                    title: Text(
                      ex['caption'] ?? '',
                      style: const TextStyle(
                        color: Colors.white,
                      ), // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
                    ),
                    subtitle: Text(
                      ex['description'] ?? '',
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                      style: TextStyle(
                        color: Colors.grey[300],
                      ), // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
                    ),
                    onTap: () {
                      setState(() {
                        _selected = ex;
                        _controller.text = ex['caption'] ?? '';
                        _options = [];
                        _showDropdown = false;
                      });
                      _removeOverlay();
                      widget.onSelected(ex);
                    },
                    selected: _selected?['uuid'] == ex['uuid'],
                    selectedTileColor:
                        Colors.grey[800], // –¶–≤–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                  );
                },
              ),
            ),
          ),
        ),
      ),
    );

    Overlay.of(context).insert(_overlayEntry!);
  }

  Future<void> _fetchOptions(String search) async {
    if (search.trim().isEmpty) {
      setState(() {
        _options = [];
        _showDropdown = false;
      });
      _removeOverlay();
      return;
    }

    setState(() => _isLoading = true);

    try {
      Map<String, dynamic> queryParams;
      String endpoint =
          widget.endpoint ?? '/exercise_reference/search/by-caption';

      if (widget.buildQueryParams != null) {
        queryParams = widget.buildQueryParams!(search);
      } else {
        queryParams = {'caption': search, 'exercise_type': 'system'};
      }

      print(
        'üîç ExerciseReferenceSelector: –ü–æ–∏—Å–∫ "$search" —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ $queryParams',
      );

      final resp = await ApiService.get(endpoint, queryParams: queryParams);

      print(
        'üîç ExerciseReferenceSelector: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${resp.statusCode}',
      );

      if (resp.statusCode == 200) {
        final data = ApiService.decodeJson(resp.body);
        print(
          'üîç ExerciseReferenceSelector: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Ç–∏–ø: ${data.runtimeType}',
        );
        print('üîç ExerciseReferenceSelector: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: $data');

        if (data is List) {
          final options = List<Map<String, dynamic>>.from(
            data,
          ).take(5).toList();
          print(
            'üîç ExerciseReferenceSelector: –°–æ–∑–¥–∞–Ω–æ ${options.length} –æ–ø—Ü–∏–π',
          );

          setState(() {
            _options = options;
            _showDropdown = options.isNotEmpty;
            _isLoading = false;
          });

          print(
            'üîç ExerciseReferenceSelector: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, _options.length = ${_options.length}, _showDropdown = $_showDropdown',
          );

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ü–∏–∏
          if (options.isNotEmpty) {
            _showOverlay();
          } else {
            _removeOverlay();
          }
        } else {
          print('üîç ExerciseReferenceSelector: –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º');
          setState(() {
            _options = [];
            _showDropdown = false;
            _isLoading = false;
          });
          _removeOverlay();
        }
      } else {
        print(
          'üîç ExerciseReferenceSelector: –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${resp.statusCode}',
        );
        setState(() {
          _options = [];
          _showDropdown = false;
          _isLoading = false;
        });
        _removeOverlay();
      }
    } catch (e) {
      print('‚ùå ExerciseReferenceSelector: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: $e');
      setState(() {
        _options = [];
        _showDropdown = false;
        _isLoading = false;
      });
      _removeOverlay();
    }
  }

  void _onSearchChanged(String value) {
    print(
      'üîç ExerciseReferenceSelector: _onSearchChanged –≤—ã–∑–≤–∞–Ω —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º "$value"',
    );

    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    _debounceTimer?.cancel();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è debouncing
    _debounceTimer = Timer(const Duration(milliseconds: 300), () {
      print('üîç ExerciseReferenceSelector: –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –¥–ª—è "$value"');
      _fetchOptions(value);
    });
  }

  @override
  Widget build(BuildContext context) {
    print(
      'üîç ExerciseReferenceSelector build: _options.length = ${_options.length}, _showDropdown = $_showDropdown, _isLoading = $_isLoading',
    );

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(widget.label, style: const TextStyle(fontWeight: FontWeight.bold)),
        const SizedBox(height: 4),
        Stack(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                hintText: '–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
                suffixIcon: _isLoading
                    ? const SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                    : _controller.text.isNotEmpty
                    ? IconButton(
                        icon: const Icon(Icons.close),
                        onPressed: () {
                          _controller.clear();
                          setState(() {
                            _options = [];
                            _showDropdown = false;
                          });
                          _removeOverlay();
                          widget.onSelected(null);
                        },
                      )
                    : null,
              ),
              onChanged: _onSearchChanged,
              onTap: () {
                if (_controller.text.isNotEmpty) {
                  _fetchOptions(_controller.text);
                }
              },
            ),
          ],
        ),
        // –ù–µ–≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è overlay
        CompositedTransformTarget(
          link: _layerLink,
          child: const SizedBox.shrink(),
        ),
        if (_selected != null)
          Padding(
            padding: const EdgeInsets.only(top: 8),
            child: Text(
              '–í—ã–±—Ä–∞–Ω–æ: ${_selected?['caption'] ?? ''}',
              style: const TextStyle(color: Colors.green),
            ),
          ),
      ],
    );
  }
}
