import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/achievement_model.dart';
import '../constants/api_constants.dart';
import 'api_service.dart';

class AchievementService {
  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<List<AchievementModel>> getUserAchievements() async {
    try {
      final response = await ApiService.get('http://10.0.2.2:8000/achievements/user');
      final List<dynamic> data = json.decode(response.body);
      return data.map((json) => AchievementModel.fromJson(json)).toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UUID
  static Future<List<AchievementModel>> getUserAchievementsByUuid(String userUuid) async {
    try {
      print('–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userUuid...');
      final response = await ApiService.get('http://10.0.2.2:8000/achievements/user/$userUuid');
      
      print('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        if (response.body.isEmpty) {
          print('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫');
          return [];
        }
        
        print('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
        
        try {
          final List<dynamic> data = json.decode(response.body);
          print('–ü–æ–ª—É—á–µ–Ω–æ ${data.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          return data.map((json) => AchievementModel.fromJson(json)).toList();
        } catch (parseError) {
          print('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: $parseError');
          return [];
        }
      } else {
        print('API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.statusCode}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫');
        return [];
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      print('–ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
      return _getMockUserAchievements();
    }
  }

  // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  static List<AchievementModel> _getMockUserAchievements() {
    return [
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —ç—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      AchievementModel(
        uuid: '2', // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        category: '–û–±—â–∏–µ',
        type: AchievementType.general,
        targetValue: 1,
        currentValue: 1,
        isUnlocked: true,
        rewardDescription: '–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º',
        unlockedAt: DateTime.now().subtract(const Duration(days: 1)),
        createdAt: DateTime.now().subtract(const Duration(days: 2)),
        icon: '‚úÖ',
      ),
      AchievementModel(
        uuid: '4', // –ù–µ–¥–µ–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        title: '–ù–µ–¥–µ–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
        description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        category: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        type: AchievementType.training,
        targetValue: 7,
        currentValue: 7,
        isUnlocked: true,
        rewardDescription: '–ë–æ–Ω—É—Å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏',
        unlockedAt: DateTime.now().subtract(const Duration(hours: 2)),
        createdAt: DateTime.now().subtract(const Duration(days: 8)),
        icon: 'üìÖ',
      ),
      AchievementModel(
        uuid: '6', // –ú–∞—Å—Ç–µ—Ä —Ç–µ—Ö–Ω–∏–∫–∏
        title: '–ú–∞—Å—Ç–µ—Ä —Ç–µ—Ö–Ω–∏–∫–∏',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π',
        category: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
        type: AchievementType.exercise,
        targetValue: 100,
        currentValue: 100,
        isUnlocked: true,
        rewardDescription: '–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏',
        unlockedAt: DateTime.now().subtract(const Duration(hours: 6)),
        createdAt: DateTime.now().subtract(const Duration(days: 5)),
        icon: 'üéØ',
      ),
    ];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  static Future<List<AchievementModel>> getAllAchievements() async {
    try {
      final response = await ApiService.get('http://10.0.2.2:8000/achievements');
      final List<dynamic> data = json.decode(response.body);
      return data.map((json) => AchievementModel.fromJson(json)).toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã achievement_types
  static Future<List<AchievementModel>> getAchievementsFromTypesTable() async {
    try {
      print('–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ API...');
      
      // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      const String endpoint = 'http://10.0.2.2:8000/achievements/types';
      print('–ü—Ä–æ–±—É–µ–º endpoint: $endpoint');

      final response = await ApiService.get(endpoint);
      print('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
      if (response.statusCode != 200) {
        print('API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.statusCode}, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
        return _getMockAchievements();
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
      if (response.body.isEmpty) {
        print('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
        return _getMockAchievements();
      }
      
      print('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
      
      try {
        final dynamic responseData = json.decode(response.body);
        print('API Response type: ${responseData.runtimeType}');
        
        List<dynamic> data;
        if (responseData is Map<String, dynamic>) {
          // –ò—â–µ–º –∫–ª—é—á —Å –¥–∞–Ω–Ω—ã–º–∏
          if (responseData.containsKey('data')) {
            data = responseData['data'] as List<dynamic>;
          } else if (responseData.containsKey('achievements')) {
            data = responseData['achievements'] as List<dynamic>;
          } else if (responseData.containsKey('results')) {
            data = responseData['results'] as List<dynamic>;
          } else if (responseData.containsKey('items')) {
            data = responseData['items'] as List<dynamic>;
          } else if (responseData.containsKey('content')) {
            data = responseData['content'] as List<dynamic>;
          } else {
            print('API –≤–µ—Ä–Ω—É–ª Map –±–µ–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
            return _getMockAchievements();
          }
        } else if (responseData is List<dynamic>) {
          data = responseData;
        } else {
          print('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
          return _getMockAchievements();
        }
        
        print('–ù–∞–π–¥–µ–Ω–æ ${data.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ API');
        return data.map((json) => AchievementModel.fromJson(json)).toList();
        
      } catch (parseError) {
        print('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: $parseError, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
        return _getMockAchievements();
      }
      
    } catch (e) {
      print('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ. –û—à–∏–±–∫–∞: $e');
      return _getMockAchievements();
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É UUID —Ç–∏–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  static Future<List<AchievementModel>> getAchievementsByTypeUuid(String achievementTypeUuid) async {
    try {
      final String endpoint = 'http://10.0.2.2:8000/achievements/types/$achievementTypeUuid';
      
      print('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–∏–ø–∞ —Å UUID: $achievementTypeUuid');
      print('Endpoint: $endpoint');

      final response = await ApiService.get(endpoint);
      print('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      print('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${response.headers}');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
      if (response.statusCode != 200) {
        print('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: ${response.body}');
        throw Exception('API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.statusCode}: ${response.body}');
      }
      
      print('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): ${response.body.length > 500 ? response.body.substring(0, 500) + "..." : response.body}');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
      if (response.body.isEmpty) {
        throw Exception('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
      final contentType = response.headers['content-type'] ?? '';
      print('Content-Type: $contentType');
      
      final dynamic responseData = json.decode(response.body);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç API
      print('API Response type: ${responseData.runtimeType}');
      print('API Response: $responseData');
      
      List<dynamic> data;
      if (responseData is Map<String, dynamic>) {
        // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Map, –∏—â–µ–º –∫–ª—é—á —Å –¥–∞–Ω–Ω—ã–º–∏
        if (responseData.containsKey('data')) {
          data = responseData['data'] as List<dynamic>;
        } else if (responseData.containsKey('achievements')) {
          data = responseData['achievements'] as List<dynamic>;
        } else if (responseData.containsKey('results')) {
          data = responseData['results'] as List<dynamic>;
        } else if (responseData.containsKey('items')) {
          data = responseData['items'] as List<dynamic>;
        } else if (responseData.containsKey('content')) {
          data = responseData['content'] as List<dynamic>;
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π List
          final listValues = responseData.values.where((value) => value is List).toList();
          if (listValues.isNotEmpty) {
            data = listValues.first as List<dynamic>;
            print('–ù–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –≤ –∫–ª—é—á–µ: ${responseData.keys.firstWhere((key) => responseData[key] == data)}');
          } else {
            // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: ${responseData.keys.toList()}');
            print('–¢–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π: ${responseData.values.map((v) => '${v.runtimeType}: $v').toList()}');
            print('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: $responseData');
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á 'detail', –≤—ã–≤–æ–¥–∏–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if (responseData.containsKey('detail')) {
              print('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${responseData['detail']}');
            }
            
            throw Exception('API –≤–µ—Ä–Ω—É–ª Map, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: ${responseData.keys.toList()}');
          }
        }
      } else if (responseData is List<dynamic>) {
        data = responseData;
      } else {
        throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç API: ${responseData.runtimeType}');
      }
      
      print('–ù–∞–π–¥–µ–Ω–æ ${data.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–∞ $achievementTypeUuid');
      return data.map((json) => AchievementModel.fromJson(json)).toList();
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ UUID —Ç–∏–ø–∞: $e');
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ UUID —Ç–∏–ø–∞ $achievementTypeUuid: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static Future<List<Map<String, dynamic>>> getAchievementTypes() async {
    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      final List<String> endpoints = [
        'http://10.0.2.2:8000/achievements/types',
        'http://10.0.2.2:8000/api/achievement_types',
        'http://10.0.2.2:8000/achievement_types',
      ];
      
      String endpoint = '';
      http.Response? response;
      
      for (final String ep in endpoints) {
        try {
          print('–ü—Ä–æ–±—É–µ–º endpoint: $ep');
          response = await ApiService.get(ep);
          if (response.statusCode == 200) {
            endpoint = ep;
            break;
          }
        } catch (e) {
          print('–û—à–∏–±–∫–∞ –¥–ª—è endpoint $ep: $e');
          continue;
        }
      }
      
      if (response == null || response!.statusCode != 200) {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ endpoint');
      }
      
      print('–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç —Å endpoint: $endpoint');
      print('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response!.statusCode}');
      print('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${response.headers}');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
      if (response.body.isEmpty) {
        throw Exception('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
      }
      
      print('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): ${response.body.length > 500 ? response.body.substring(0, 500) + "..." : response.body}');
      
      final dynamic responseData = json.decode(response.body);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç API
      print('API Response type: ${responseData.runtimeType}');
      print('API Response: $responseData');
      
      List<dynamic> data;
      if (responseData is Map<String, dynamic>) {
        // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Map, –∏—â–µ–º –∫–ª—é—á —Å –¥–∞–Ω–Ω—ã–º–∏
        if (responseData.containsKey('data')) {
          data = responseData['data'] as List<dynamic>;
        } else if (responseData.containsKey('types')) {
          data = responseData['types'] as List<dynamic>;
        } else if (responseData.containsKey('results')) {
          data = responseData['results'] as List<dynamic>;
        } else if (responseData.containsKey('items')) {
          data = responseData['items'] as List<dynamic>;
        } else if (responseData.containsKey('content')) {
          data = responseData['content'] as List<dynamic>;
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π List
          final listValues = responseData.values.where((value) => value is List).toList();
          if (listValues.isNotEmpty) {
            data = listValues.first as List<dynamic>;
            print('–ù–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –≤ –∫–ª—é—á–µ: ${responseData.keys.firstWhere((key) => responseData[key] == data)}');
          } else {
            // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: ${responseData.keys.toList()}');
            print('–¢–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π: ${responseData.values.map((v) => '${v.runtimeType}: $v').toList()}');
            print('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: $responseData');
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á 'detail', –≤—ã–≤–æ–¥–∏–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if (responseData.containsKey('detail')) {
              print('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${responseData['detail']}');
            }
            
            throw Exception('API –≤–µ—Ä–Ω—É–ª Map, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: ${responseData.keys.toList()}');
          }
        }
      } else if (responseData is List<dynamic>) {
        data = responseData;
      } else {
        throw Exception('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç API: ${responseData.runtimeType}');
      }
      
      print('–ù–∞–π–¥–µ–Ω–æ ${data.length} —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      return data.cast<Map<String, dynamic>>();
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  static List<AchievementModel> _getMockAchievements() {
    return [
      // –û–±—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      AchievementModel(
        uuid: '1',
        title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        description: '–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É',
        category: '–û–±—â–∏–µ',
        type: AchievementType.general,
        targetValue: 1,
        currentValue: 0,
        isUnlocked: false,
        rewardDescription: '–ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç',
        unlockedAt: null,
        createdAt: DateTime.now(),
        icon: '‚≠ê',
      ),
      AchievementModel(
        uuid: '2',
        title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
        category: '–û–±—â–∏–µ',
        type: AchievementType.general,
        targetValue: 1,
        currentValue: 1,
        isUnlocked: false, // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ false –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        rewardDescription: '–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º',
        unlockedAt: null, // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ null –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        createdAt: DateTime.now(),
        icon: '‚úÖ',
      ),
      
      // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      AchievementModel(
        uuid: '3',
        title: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        category: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        type: AchievementType.training,
        targetValue: 1,
        currentValue: 0,
        isUnlocked: false,
        rewardDescription: '–û–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
        unlockedAt: null,
        createdAt: DateTime.now(),
        icon: 'üí™',
      ),
      AchievementModel(
        uuid: '4',
        title: '–ù–µ–¥–µ–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
        description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        category: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        type: AchievementType.training,
        targetValue: 7,
        currentValue: 3,
        isUnlocked: false,
        rewardDescription: '–ë–æ–Ω—É—Å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏',
        unlockedAt: null,
        createdAt: DateTime.now(),
        icon: 'üìÖ',
      ),
      
      // –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      AchievementModel(
        uuid: '5',
        title: '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
        category: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
        type: AchievementType.exercise,
        targetValue: 10,
        currentValue: 6,
        isUnlocked: false,
        rewardDescription: '–û–ø—ã—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
        unlockedAt: null,
        createdAt: DateTime.now(),
        icon: 'üèÉ',
      ),
      AchievementModel(
        uuid: '6',
        title: '–ú–∞—Å—Ç–µ—Ä —Ç–µ—Ö–Ω–∏–∫–∏',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 100 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π',
        category: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
        type: AchievementType.exercise,
        targetValue: 100,
        currentValue: 75,
        isUnlocked: false,
        rewardDescription: '–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏',
        unlockedAt: null,
        createdAt: DateTime.now(),
        icon: 'üéØ',
      ),
      
      // –°—Ç—Ä–µ–∂
      AchievementModel(
        uuid: '7',
        title: '–ù–∞—á–∞–ª–æ –ø—É—Ç–∏',
        description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥',
        category: '–°—Ç—Ä–µ–∂',
        type: AchievementType.streak,
        targetValue: 3,
        currentValue: 2,
        isUnlocked: false,
        rewardDescription: '–ë–æ–Ω—É—Å –º–æ—Ç–∏–≤–∞—Ü–∏–∏',
        unlockedAt: null,
        createdAt: DateTime.now(),
        icon: 'üî•',
      ),
      
      // –í—Ä–µ–º—è
      AchievementModel(
        uuid: '8',
        title: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
        description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 30 –º–∏–Ω—É—Ç –ø–æ–¥—Ä—è–¥',
        category: '–í—Ä–µ–º—è',
        type: AchievementType.time,
        targetValue: 30,
        currentValue: 25,
        isUnlocked: false,
        rewardDescription: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏',
        unlockedAt: null,
        createdAt: DateTime.now(),
        icon: '‚è±Ô∏è',
      ),
      
      // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ
      AchievementModel(
        uuid: '9',
        title: '–ö–æ–º–∞–Ω–¥–∞',
        description: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ',
        category: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
        type: AchievementType.social,
        targetValue: 1,
        currentValue: 0,
        isUnlocked: false,
        rewardDescription: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã',
        unlockedAt: null,
        createdAt: DateTime.now(),
        icon: 'üë•',
      ),
    ];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ ID
  static Future<AchievementModel> getAchievementById(String id) async {
    try {
      final response = await ApiService.get('http://10.0.2.2:8000/achievements/$id');
      final Map<String, dynamic> data = json.decode(response.body);
      return AchievementModel.fromJson(data);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ ID: $e');
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  static Future<AchievementModel> updateAchievementProgress(String achievementId, int newValue) async {
    try {
      final response = await ApiService.put(
        'http://10.0.2.2:8000/achievements/$achievementId/progress',
        body: {'current_value': newValue},
      );
      final Map<String, dynamic> data = json.decode(response.body);
      return AchievementModel.fromJson(data);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: $e');
    }
  }

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
  static Future<AchievementModel> unlockAchievement(String achievementId) async {
    try {
      final response = await ApiService.post(
        'http://10.0.2.2:8000/achievements/$achievementId/unlock',
        body: {},
      );
      final Map<String, dynamic> data = json.decode(response.body);
      return AchievementModel.fromJson(data);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É
  static Future<List<AchievementModel>> getAchievementsByType(AchievementType type) async {
    try {
      final response = await ApiService.get('http://10.0.2.2:8000/achievements/type/${type.name}');
      final List<dynamic> data = json.decode(response.body);
      return data.map((json) => AchievementModel.fromJson(json)).toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static Future<Map<String, dynamic>> getAchievementsStats() async {
    try {
      final response = await ApiService.get('http://10.0.2.2:8000/achievements/stats');
      return json.decode(response.body);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  static Future<void> checkAndUpdateAchievements() async {
    try {
      await ApiService.post('http://10.0.2.2:8000/achievements/check', body: {});
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  static Future<List<AchievementModel>> getRecentlyUnlockedAchievements() async {
    try {
      final response = await ApiService.get('http://10.0.2.2:8000/achievements/recent');
      final List<dynamic> data = json.decode(response.body);
      return data.map((json) => AchievementModel.fromJson(json)).toList();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }
}
