import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'dart:async';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:path_provider/path_provider.dart';
import 'package:crypto/crypto.dart';
import '../constants/api_constants.dart';
import 'package:http_parser/http_parser.dart';
import 'package:flutter/material.dart';

/// –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
class NetworkException implements Exception {
  final String message;
  NetworkException(this.message);

  @override
  String toString() => message;
}

class ApiService {
  static const String _logPrefix = 'üåê API';

  // –ö—ç—à —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ SharedPreferences
  static String? _cachedToken;
  static bool _tokenInitialized = false;

  // –ö—ç—à —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  static final Map<String, Uint8List> _fileCache = {};

  // –ö—ç—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Ä–∞–∑–º–µ—Ä, –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏)
  static final Map<String, Map<String, dynamic>> _fileMetadata = {};

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞
  static Future<String> get _cacheDirectory async {
    final dir = await getApplicationDocumentsDirectory();
    final cacheDir = Directory('${dir.path}/file_cache');
    if (!await cacheDir.exists()) {
      await cacheDir.create(recursive: true);
    }
    return cacheDir.path;
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ö–µ—à –¥–ª—è UUID —Ñ–∞–π–ª–∞ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
  static String _createFileHash(String uuid) {
    return sha256.convert(utf8.encode(uuid)).toString();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
  static Future<String> _getCachedFilePath(String uuid) async {
    final cacheDir = await _cacheDirectory;
    final fileHash = _createFileHash(uuid);
    return '$cacheDir/$fileHash';
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –∫—ç—à–µ
  static Future<bool> _isFileCached(String uuid) async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
    if (_fileCache.containsKey(uuid)) {
      return true;
    }

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫
    final filePath = await _getCachedFilePath(uuid);
    final file = File(filePath);
    return await file.exists();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –∫—ç—à–∞
  static Future<Uint8List?> _getCachedFile(String uuid) async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
    if (_fileCache.containsKey(uuid)) {
      return _fileCache[uuid];
    }

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫
    final filePath = await _getCachedFilePath(uuid);
    final file = File(filePath);
    if (await file.exists()) {
      try {
        final bytes = await file.readAsBytes();
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        _fileCache[uuid] = bytes;
        return bytes;
      } catch (e) {
        print('$_logPrefix ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $e');
        return null;
      }
    }

    return null;
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ –∫—ç—à
  static Future<void> _saveFileToCache(String uuid, Uint8List bytes) async {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
      _fileCache[uuid] = bytes;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
      final filePath = await _getCachedFilePath(uuid);
      final file = File(filePath);
      await file.writeAsBytes(bytes);

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      _fileMetadata[uuid] = {
        'size': bytes.length,
        'timestamp': DateTime.now().millisecondsSinceEpoch,
        'path': filePath,
      };

      print('$_logPrefix üíæ –§–∞–π–ª $uuid —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à (${bytes.length} –±–∞–π—Ç)');
    } catch (e) {
      print('$_logPrefix ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –∫—ç—à: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ñ–∞–π–ª–æ–≤
  static Future<void> clearFileCache() async {
    try {
      // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
      _fileCache.clear();
      _fileMetadata.clear();

      // –û—á–∏—â–∞–µ–º –¥–∏—Å–∫
      final cacheDir = await _cacheDirectory;
      final dir = Directory(cacheDir);
      if (await dir.exists()) {
        await dir.delete(recursive: true);
        await dir.create();
      }

      print('$_logPrefix üóëÔ∏è –ö—ç—à —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω');
    } catch (e) {
      print('$_logPrefix ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
  static Future<int> getCacheSize() async {
    try {
      final cacheDir = await _cacheDirectory;
      final dir = Directory(cacheDir);
      if (!await dir.exists()) return 0;

      int totalSize = 0;
      await for (final entity in dir.list(recursive: true)) {
        if (entity is File) {
          totalSize += await entity.length();
        }
      }

      return totalSize;
    } catch (e) {
      print('$_logPrefix ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞: $e');
      return 0;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ UUID
  static Future<Uint8List?> getFile(
    String uuid, {
    bool forceRefresh = false,
  }) async {
    if (uuid.isEmpty) return null;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (!forceRefresh) {
        final cachedFile = await _getCachedFile(uuid);
        if (cachedFile != null) {
          print('$_logPrefix üìÅ –§–∞–π–ª $uuid –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞');
          return cachedFile;
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
      print('$_logPrefix üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª $uuid —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      final response = await get('/files/file/$uuid');

      if (response.statusCode == 200) {
        final bytes = response.bodyBytes;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await _saveFileToCache(uuid, bytes);

        print('$_logPrefix ‚úÖ –§–∞–π–ª $uuid —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à');
        return bytes;
      } else {
        print(
          '$_logPrefix ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ $uuid: ${response.statusCode}',
        );
        return null;
      }
    } catch (e) {
      print('$_logPrefix ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º $uuid: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å ImageProvider –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  static Future<ImageProvider?> getImageProvider(
    String uuid, {
    bool forceRefresh = false,
  }) async {
    final bytes = await getFile(uuid, forceRefresh: forceRefresh);
    if (bytes != null) {
      return MemoryImage(bytes);
    }
    return null;
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
  static Future<void> initializeToken() async {
    if (!_tokenInitialized) {
      final prefs = await SharedPreferences.getInstance();
      _cachedToken = prefs.getString('user_token');
      _tokenInitialized = true;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ/–ª–æ–≥–∞—É—Ç–µ)
  static void updateToken(String? token) {
    _cachedToken = token;
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> get(
    String endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    return _makeRequest(
      method: 'GET',
      endpoint: endpoint,
      headers: headers,
      queryParams: queryParams,
      timeout: timeout,
    );
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> post(
    String endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? body,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    return _makeRequest(
      method: 'POST',
      endpoint: endpoint,
      headers: headers,
      body: body,
      queryParams: queryParams,
      timeout: timeout,
    );
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è PUT –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> put(
    String endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? body,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    return _makeRequest(
      method: 'PUT',
      endpoint: endpoint,
      headers: headers,
      body: body,
      queryParams: queryParams,
      timeout: timeout,
    );
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è DELETE –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> delete(
    String endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    return _makeRequest(
      method: 'DELETE',
      endpoint: endpoint,
      headers: headers,
      queryParams: queryParams,
      timeout: timeout,
    );
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è PATCH –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> patch(
    String endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? body,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    return _makeRequest(
      method: 'PATCH',
      endpoint: endpoint,
      headers: headers,
      body: body,
      queryParams: queryParams,
      timeout: timeout,
    );
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è multipart/form-data (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤)
  static Future<http.Response> multipart(
    String endpoint, {
    required String fileField,
    required String filePath,
    String? mimeType,
    Map<String, String>? fields,
    Map<String, String>? headers,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!_tokenInitialized) {
      await initializeToken();
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    final requestHeaders = <String, String>{...?headers};
    if (_cachedToken != null && _cachedToken!.isNotEmpty) {
      requestHeaders['Cookie'] = 'users_access_token=$_cachedToken';
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URI —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    String uri;
    if (endpoint.startsWith('http://') || endpoint.startsWith('https://')) {
      // –ï—Å–ª–∏ endpoint —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
      uri = endpoint;
    } else {
      // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
      uri = '${ApiConstants.baseUrl}$endpoint';
    }

    if (queryParams != null && queryParams.isNotEmpty) {
      final queryString = queryParams.entries
          .map((e) => '${e.key}=${Uri.encodeComponent(e.value.toString())}')
          .join('&');
      uri += '?$queryString';
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    _logRequest(
      method: 'POST (multipart)',
      uri: uri,
      headers: requestHeaders,
      body: 'file: $filePath, fields: $fields',
    );

    final request = http.MultipartRequest('POST', Uri.parse(uri));
    request.headers.addAll(requestHeaders);
    if (fields != null) {
      request.fields.addAll(fields);
    }
    request.files.add(
      await http.MultipartFile.fromPath(
        fileField,
        filePath,
        contentType: mimeType != null ? MediaType.parse(mimeType) : null,
      ),
    );

    http.StreamedResponse streamedResponse;
    http.Response response;
    try {
      streamedResponse = await request.send().timeout(timeout);
      response = await http.Response.fromStream(streamedResponse);
    } catch (e) {
      _logError(method: 'POST (multipart)', uri: uri, error: e.toString());
      rethrow;
    }

    _logResponse(
      method: 'POST (multipart)',
      uri: uri,
      statusCode: response.statusCode,
      headers: response.headers,
      body: response.body,
    );

    return response;
  }

  /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> _makeRequest({
    required String method,
    required String endpoint,
    Map<String, String>? headers,
    Map<String, dynamic>? body,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!_tokenInitialized) {
      await initializeToken();
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    final requestHeaders = <String, String>{
      'Content-Type': 'application/json',
      ...?headers,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (_cachedToken != null && _cachedToken!.isNotEmpty) {
      requestHeaders['Cookie'] = 'users_access_token=$_cachedToken';
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URI —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    String uri;
    if (endpoint.startsWith('http://') || endpoint.startsWith('https://')) {
      // –ï—Å–ª–∏ endpoint —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
      uri = endpoint;
    } else {
      // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
      uri = '${ApiConstants.baseUrl}$endpoint';
    }

    if (queryParams != null && queryParams.isNotEmpty) {
      final queryString = queryParams.entries
          .map((e) => '${e.key}=${Uri.encodeComponent(e.value.toString())}')
          .join('&');
      uri += '?$queryString';
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º body
    String? requestBody;
    if (body != null) {
      requestBody = jsonEncode(body);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    _logRequest(
      method: method,
      uri: uri,
      headers: requestHeaders,
      body: requestBody,
    );

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    http.Response response;
    try {
      switch (method.toUpperCase()) {
        case 'GET':
          response = await http
              .get(Uri.parse(uri), headers: requestHeaders)
              .timeout(timeout);
          break;
        case 'POST':
          response = await http
              .post(Uri.parse(uri), headers: requestHeaders, body: requestBody)
              .timeout(timeout);
          break;
        case 'PUT':
          response = await http
              .put(Uri.parse(uri), headers: requestHeaders, body: requestBody)
              .timeout(timeout);
          break;
        case 'DELETE':
          response = await http
              .delete(Uri.parse(uri), headers: requestHeaders)
              .timeout(timeout);
          break;
        case 'PATCH':
          response = await http
              .patch(Uri.parse(uri), headers: requestHeaders, body: requestBody)
              .timeout(timeout);
          break;
        default:
          throw ArgumentError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: $method');
      }
    } catch (e) {
      _logError(method: method, uri: uri, error: e.toString());

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
      if (e is SocketException) {
        throw NetworkException(
          '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.',
        );
      } else if (e is TimeoutException) {
        throw NetworkException(
          '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
        );
      } else if (e is HttpException) {
        throw NetworkException('–û—à–∏–±–∫–∞ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.');
      }

      rethrow;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    _logResponse(
      method: method,
      uri: uri,
      statusCode: response.statusCode,
      headers: response.headers,
      body: response.body,
    );

    return response;
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
  static void _logRequest({
    required String method,
    required String uri,
    required Map<String, String> headers,
    String? body,
  }) {
    final timestamp = DateTime.now().toIso8601String();
    print(
      '$_logPrefix ================================================================================',
    );
    print('$_logPrefix üïê –í–†–ï–ú–Ø: $timestamp');
    print('$_logPrefix üì° –ú–ï–¢–û–î: $method');
    print('$_logPrefix üåê URI: $uri');
    print('$_logPrefix üìã –ó–ê–ì–û–õ–û–í–ö–ò:');
    headers.forEach((key, value) {
      print('$_logPrefix    $key: $value');
    });
    if (body != null) {
      print('$_logPrefix üì¶ –¢–ï–õ–û –ó–ê–ü–†–û–°–ê:');
      print('$_logPrefix    $body');
    }
    print(
      '$_logPrefix ================================================================================',
    );
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  static void _logResponse({
    required String method,
    required String uri,
    required int statusCode,
    required Map<String, String> headers,
    required String body,
  }) {
    print(
      '$_logPrefix ================================================================================',
    );
    print('$_logPrefix üì• –û–¢–í–ï–¢ API ($method):');
    print('$_logPrefix üìä –°–¢–ê–¢–£–°: $statusCode');
    if (headers.isNotEmpty) {
      print('$_logPrefix üìã –ó–ê–ì–û–õ–û–í–ö–ò –û–¢–í–ï–¢–ê:');
      headers.forEach((key, value) {
        print('$_logPrefix    $key: $value');
      });
    }
    print('$_logPrefix üì¶ –¢–ï–õ–û –û–¢–í–ï–¢–ê:');
    print('$_logPrefix    $body');
    print(
      '$_logPrefix ================================================================================',
    );
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
  static void _logError({
    required String method,
    required String uri,
    required String error,
  }) {
    final timestamp = DateTime.now().toIso8601String();
    print(
      '$_logPrefix ================================================================================',
    );
    print('$_logPrefix ‚ùå –û–®–ò–ë–ö–ê API ($method):');
    print('$_logPrefix üïê –í–†–ï–ú–Ø: $timestamp');
    print('$_logPrefix üåê URI: $uri');
    print('$_logPrefix üí• –û–®–ò–ë–ö–ê: $error');
    print(
      '$_logPrefix ================================================================================',
    );
  }

  /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞
  static dynamic decodeJson(String jsonString) {
    try {
      return jsonDecode(jsonString);
    } catch (e) {
      print('$_logPrefix ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: $e');
      print('$_logPrefix üì¶ –°—Ç—Ä–æ–∫–∞ JSON: $jsonString');
      rethrow;
    }
  }

  /// –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  static Future<http.Response> uploadFile(
    String endpoint,
    File file,
    String fieldName, {
    Map<String, String>? additionalFields,
    Duration timeout = const Duration(seconds: 60),
  }) async {
    try {
      await initializeToken();

      final uri = Uri.parse('${ApiConstants.baseUrl}$endpoint');

      // –°–æ–∑–¥–∞–µ–º multipart request
      final request = http.MultipartRequest('POST', uri);

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (_cachedToken != null) {
        request.headers['Cookie'] = 'users_access_token=$_cachedToken';
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      String? mimeType;
      final extension = file.path.split('.').last.toLowerCase();
      switch (extension) {
        case 'jpg':
        case 'jpeg':
          mimeType = 'image/jpeg';
          break;
        case 'png':
          mimeType = 'image/png';
          break;
        case 'gif':
          mimeType = 'image/gif';
          break;
        case 'webp':
          mimeType = 'image/webp';
          break;
        case 'mp4':
          mimeType = 'video/mp4';
          break;
        case 'mov':
          mimeType = 'video/quicktime';
          break;
        case 'avi':
          mimeType = 'video/x-msvideo';
          break;
        case 'mkv':
          mimeType = 'video/x-matroska';
          break;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º
      final fileStream = http.ByteStream(file.openRead());
      final fileLength = await file.length();
      final multipartFile = http.MultipartFile(
        fieldName,
        fileStream,
        fileLength,
        filename: file.path.split('/').last,
        contentType: mimeType != null ? MediaType.parse(mimeType) : null,
      );
      request.files.add(multipartFile);

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (additionalFields != null) {
        request.fields.addAll(additionalFields);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      _logRequest(
        method: 'POST',
        uri: uri.toString(),
        headers: request.headers,
        body: 'Multipart file upload: ${file.path} (MIME: $mimeType)',
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      final streamedResponse = await request.send().timeout(timeout);
      final response = await http.Response.fromStream(streamedResponse);

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      _logResponse(
        method: 'POST',
        uri: uri.toString(),
        statusCode: response.statusCode,
        headers: response.headers,
        body: response.body,
      );

      return response;
    } catch (e) {
      _logError(
        method: 'POST',
        uri: '${ApiConstants.baseUrl}$endpoint',
        error: e.toString(),
      );
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  static Future<Map<String, dynamic>?> getExerciseReference(
    String exerciseReferenceUuid,
  ) async {
    try {
      final response = await get('/exercise_reference/$exerciseReferenceUuid');
      if (response.statusCode == 200) {
        return decodeJson(response.body);
      } else {
        print(
          '$_logPrefix ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: ${response.statusCode}',
        );
        return null;
      }
    } catch (e) {
      print('$_logPrefix ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<Map<String, dynamic>?> getExerciseStatistics(
    String exerciseReferenceUuid,
    String userUuid,
  ) async {
    try {
      final response = await get(
        '/exercise_reference/$exerciseReferenceUuid/statistics/$userUuid',
      );
      if (response.statusCode == 200) {
        return decodeJson(response.body);
      } else {
        print(
          '$_logPrefix ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: ${response.statusCode}',
        );
        return null;
      }
    } catch (e) {
      print('$_logPrefix ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: $e');
      return null;
    }
  }

  /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL
  static String get baseUrl => ApiConstants.baseUrl;
}
