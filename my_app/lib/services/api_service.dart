import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../constants/api_constants.dart';
import 'package:http_parser/http_parser.dart';

class ApiService {
  static const String _logPrefix = 'üåê API';

  // –ö—ç—à —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ SharedPreferences
  static String? _cachedToken;
  static bool _tokenInitialized = false;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
  static Future<void> initializeToken() async {
    if (!_tokenInitialized) {
      final prefs = await SharedPreferences.getInstance();
      _cachedToken = prefs.getString('user_token');
      _tokenInitialized = true;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ/–ª–æ–≥–∞—É—Ç–µ)
  static void updateToken(String? token) {
    _cachedToken = token;
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> get(
    String endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    return _makeRequest(
      method: 'GET',
      endpoint: endpoint,
      headers: headers,
      queryParams: queryParams,
      timeout: timeout,
    );
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> post(
    String endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? body,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    return _makeRequest(
      method: 'POST',
      endpoint: endpoint,
      headers: headers,
      body: body,
      queryParams: queryParams,
      timeout: timeout,
    );
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è PUT –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> put(
    String endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? body,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    return _makeRequest(
      method: 'PUT',
      endpoint: endpoint,
      headers: headers,
      body: body,
      queryParams: queryParams,
      timeout: timeout,
    );
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è DELETE –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> delete(
    String endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    return _makeRequest(
      method: 'DELETE',
      endpoint: endpoint,
      headers: headers,
      queryParams: queryParams,
      timeout: timeout,
    );
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è PATCH –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> patch(
    String endpoint, {
    Map<String, String>? headers,
    Map<String, dynamic>? body,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    return _makeRequest(
      method: 'PATCH',
      endpoint: endpoint,
      headers: headers,
      body: body,
      queryParams: queryParams,
      timeout: timeout,
    );
  }

  /// –ï–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è multipart/form-data (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤)
  static Future<http.Response> multipart(
    String endpoint, {
    required String fileField,
    required String filePath,
    String? mimeType,
    Map<String, String>? fields,
    Map<String, String>? headers,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!_tokenInitialized) {
      await initializeToken();
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    final requestHeaders = <String, String>{...?headers};
    if (_cachedToken != null && _cachedToken!.isNotEmpty) {
      requestHeaders['Cookie'] = 'users_access_token=$_cachedToken';
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URI —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    String uri = '${ApiConstants.baseUrl}$endpoint';
    if (queryParams != null && queryParams.isNotEmpty) {
      final queryString = queryParams.entries
          .map((e) => '${e.key}=${Uri.encodeComponent(e.value.toString())}')
          .join('&');
      uri += '?$queryString';
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    _logRequest(
      method: 'POST (multipart)',
      uri: uri,
      headers: requestHeaders,
      body: 'file: $filePath, fields: $fields',
    );

    final request = http.MultipartRequest('POST', Uri.parse(uri));
    request.headers.addAll(requestHeaders);
    if (fields != null) {
      request.fields.addAll(fields);
    }
    request.files.add(
      await http.MultipartFile.fromPath(
        fileField,
        filePath,
        contentType: mimeType != null ? MediaType.parse(mimeType) : null,
      ),
    );

    http.StreamedResponse streamedResponse;
    http.Response response;
    try {
      streamedResponse = await request.send().timeout(timeout);
      response = await http.Response.fromStream(streamedResponse);
    } catch (e) {
      _logError(method: 'POST (multipart)', uri: uri, error: e.toString());
      rethrow;
    }

    _logResponse(
      method: 'POST (multipart)',
      uri: uri,
      statusCode: response.statusCode,
      headers: response.headers,
      body: response.body,
    );

    return response;
  }

  /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<http.Response> _makeRequest({
    required String method,
    required String endpoint,
    Map<String, String>? headers,
    Map<String, dynamic>? body,
    Map<String, dynamic>? queryParams,
    Duration timeout = const Duration(seconds: 40),
  }) async {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!_tokenInitialized) {
      await initializeToken();
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    final requestHeaders = <String, String>{
      'Content-Type': 'application/json',
      ...?headers,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (_cachedToken != null && _cachedToken!.isNotEmpty) {
      requestHeaders['Cookie'] = 'users_access_token=$_cachedToken';
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URI —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    String uri = '${ApiConstants.baseUrl}$endpoint';
    if (queryParams != null && queryParams.isNotEmpty) {
      final queryString = queryParams.entries
          .map((e) => '${e.key}=${Uri.encodeComponent(e.value.toString())}')
          .join('&');
      uri += '?$queryString';
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º body
    String? requestBody;
    if (body != null) {
      requestBody = jsonEncode(body);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    _logRequest(
      method: method,
      uri: uri,
      headers: requestHeaders,
      body: requestBody,
    );

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    http.Response response;
    try {
      switch (method.toUpperCase()) {
        case 'GET':
          response = await http
              .get(Uri.parse(uri), headers: requestHeaders)
              .timeout(timeout);
          break;
        case 'POST':
          response = await http
              .post(Uri.parse(uri), headers: requestHeaders, body: requestBody)
              .timeout(timeout);
          break;
        case 'PUT':
          response = await http
              .put(Uri.parse(uri), headers: requestHeaders, body: requestBody)
              .timeout(timeout);
          break;
        case 'DELETE':
          response = await http
              .delete(Uri.parse(uri), headers: requestHeaders)
              .timeout(timeout);
          break;
        case 'PATCH':
          response = await http
              .patch(Uri.parse(uri), headers: requestHeaders, body: requestBody)
              .timeout(timeout);
          break;
        default:
          throw ArgumentError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: $method');
      }
    } catch (e) {
      _logError(method: method, uri: uri, error: e.toString());
      rethrow;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    _logResponse(
      method: method,
      uri: uri,
      statusCode: response.statusCode,
      headers: response.headers,
      body: response.body,
    );

    return response;
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
  static void _logRequest({
    required String method,
    required String uri,
    required Map<String, String> headers,
    String? body,
  }) {
    final timestamp = DateTime.now().toIso8601String();
    print(
      '$_logPrefix ================================================================================',
    );
    print('$_logPrefix üïê –í–†–ï–ú–Ø: $timestamp');
    print('$_logPrefix üì° –ú–ï–¢–û–î: $method');
    print('$_logPrefix üåê URI: $uri');
    print('$_logPrefix üìã –ó–ê–ì–û–õ–û–í–ö–ò:');
    headers.forEach((key, value) {
      print('$_logPrefix    $key: $value');
    });
    if (body != null) {
      print('$_logPrefix üì¶ –¢–ï–õ–û –ó–ê–ü–†–û–°–ê:');
      print('$_logPrefix    $body');
    }
    print(
      '$_logPrefix ================================================================================',
    );
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  static void _logResponse({
    required String method,
    required String uri,
    required int statusCode,
    required Map<String, String> headers,
    required String body,
  }) {
    print(
      '$_logPrefix ================================================================================',
    );
    print('$_logPrefix üì• –û–¢–í–ï–¢ API ($method):');
    print('$_logPrefix üìä –°–¢–ê–¢–£–°: $statusCode');
    if (headers.isNotEmpty) {
      print('$_logPrefix üìã –ó–ê–ì–û–õ–û–í–ö–ò –û–¢–í–ï–¢–ê:');
      headers.forEach((key, value) {
        print('$_logPrefix    $key: $value');
      });
    }
    print('$_logPrefix üì¶ –¢–ï–õ–û –û–¢–í–ï–¢–ê:');
    print('$_logPrefix    $body');
    print(
      '$_logPrefix ================================================================================',
    );
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
  static void _logError({
    required String method,
    required String uri,
    required String error,
  }) {
    final timestamp = DateTime.now().toIso8601String();
    print(
      '$_logPrefix ================================================================================',
    );
    print('$_logPrefix ‚ùå –û–®–ò–ë–ö–ê API ($method):');
    print('$_logPrefix üïê –í–†–ï–ú–Ø: $timestamp');
    print('$_logPrefix üåê URI: $uri');
    print('$_logPrefix üí• –û–®–ò–ë–ö–ê: $error');
    print(
      '$_logPrefix ================================================================================',
    );
  }

  /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞
  static dynamic decodeJson(String jsonString) {
    try {
      return jsonDecode(jsonString);
    } catch (e) {
      print('$_logPrefix ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: $e');
      print('$_logPrefix üì¶ –°—Ç—Ä–æ–∫–∞ JSON: $jsonString');
      rethrow;
    }
  }

  /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL
  static String get baseUrl => ApiConstants.baseUrl;
}
