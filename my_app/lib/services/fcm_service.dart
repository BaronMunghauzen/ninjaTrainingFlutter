import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'api_service.dart';
import 'notification_service.dart';

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π FCM
/// –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–Ω–µ –≤ –∫–ª–∞—Å—Å–µ!)
@pragma('vm:entry-point')
Future<void> firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  print('üî• FCM Background: –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
  print('üî• FCM Background: Title: ${message.notification?.title}');
  print('üî• FCM Background: Body: ${message.notification?.body}');

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  await NotificationService.showTimerEndNotification();
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firebase Cloud Messaging
class FCMService {
  static FirebaseMessaging? _messaging;
  static String? _currentToken;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FCM
  static Future<void> initialize() async {
    print('üî• FCM: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

    try {
      _messaging = FirebaseMessaging.instance;

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      final settings = await _messaging!.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        provisional: false,
      );

      print('üî• FCM: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${settings.authorizationStatus}');

      if (settings.authorizationStatus == AuthorizationStatus.authorized) {
        print('üî• FCM: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');

        // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω
        await _refreshToken();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        _setupMessageHandlers();

        // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        _messaging!.onTokenRefresh.listen((newToken) {
          print('üî• FCM: –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
          _currentToken = newToken;
          _sendTokenToServer(newToken);
        });
      } else {
        print('üî• FCM: ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
      }
    } catch (e) {
      print('üî• FCM: ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å FCM —Ç–æ–∫–µ–Ω
  static Future<String?> getToken() async {
    if (_currentToken != null) {
      return _currentToken;
    }

    return await _refreshToken();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å FCM —Ç–æ–∫–µ–Ω
  static Future<String?> _refreshToken() async {
    try {
      final token = await _messaging?.getToken();
      print('üî• FCM: –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${token?.substring(0, 20)}...');
      _currentToken = token;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      if (token != null) {
        await _sendTokenToServer(token);
      }

      return token;
    } catch (e) {
      print('üî• FCM: ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $e');
      return null;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ backend
  static Future<void> _sendTokenToServer(
    String token, {
    String? userUuid,
  }) async {
    print('üî• FCM: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

    try {
      // –ï—Å–ª–∏ userUuid –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ SharedPreferences
      String? uuid = userUuid;
      if (uuid == null) {
        final prefs = await SharedPreferences.getInstance();
        uuid = prefs.getString('user_uuid');
      }

      if (uuid == null || uuid.isEmpty) {
        print('üî• FCM: ‚ö†Ô∏è User UUID –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–∫–µ–Ω–∞');
        return;
      }

      final response = await ApiService.post(
        '/notifications/update-fcm-token',
        body: {'user_uuid': uuid, 'fcm_token': token},
      );

      if (response.statusCode == 200) {
        print('üî• FCM: ‚úÖ –¢–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      } else {
        print('üî• FCM: ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω: ${response.statusCode}');
      }
    } catch (e) {
      print('üî• FCM: ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $e');
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  static void _setupMessageHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –û–¢–ö–†–´–¢–û (foreground)
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('üî• FCM Foreground: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      print('üî• FCM Foreground: Title: ${message.notification?.title}');
      print('üî• FCM Foreground: Body: ${message.notification?.body}');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      NotificationService.showTimerEndNotification();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ê–ñ–ê–õ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('üî• FCM: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      print('üî• FCM: Data: ${message.data}');

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –Ω—É–∂–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤ data –µ—Å—Ç—å exercise_uuid - –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    FirebaseMessaging.instance.getInitialMessage().then((message) {
      if (message != null) {
        print('üî• FCM: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
        print('üî• FCM: Data: ${message.data}');
      }
    });
  }

  /// –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ backend
  static Future<void> scheduleTimerOnBackend({
    required String userUuid,
    required String exerciseUuid,
    required String exerciseName,
    required int durationSeconds,
  }) async {
    print('üî• FCM: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ backend ($durationSeconds —Å–µ–∫)...');

    try {
      final response = await ApiService.post(
        '/notifications/schedule-timer',
        body: {
          'user_uuid': userUuid,
          'exercise_uuid': exerciseUuid,
          'exercise_name': exerciseName,
          'duration_seconds': durationSeconds,
        },
      );

      if (response.statusCode == 200) {
        final data = ApiService.decodeJson(response.body);
        print('üî• FCM: ‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ backend');
        print('üî• FCM: Job ID: ${data['job_id']}');
        print('üî• FCM: Scheduled time: ${data['scheduled_time']}');
      } else {
        print('üî• FCM: ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å: ${response.statusCode}');
      }
    } catch (e) {
      print('üî• FCM: ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: $e');
    }
  }

  /// –û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ backend
  static Future<void> cancelTimerOnBackend({required String userUuid}) async {
    print('üî• FCM: –û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ backend...');

    try {
      final response = await ApiService.post(
        '/notifications/cancel-timer',
        body: {'user_uuid': userUuid},
      );

      if (response.statusCode == 200) {
        print('üî• FCM: ‚úÖ –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –Ω–∞ backend');
      } else {
        print('üî• FCM: ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å: ${response.statusCode}');
      }
    } catch (e) {
      print('üî• FCM: ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç–∞–π–º–µ—Ä–∞: $e');
    }
  }

  /// –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Future<void> sendTestNotification(String userUuid) async {
    print('üî• FCM: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

    try {
      final response = await ApiService.post(
        '/notifications/test-notification?user_uuid=$userUuid',
      );

      if (response.statusCode == 200) {
        print('üî• FCM: ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } else {
        print('üî• FCM: ‚ö†Ô∏è –û—à–∏–±–∫–∞: ${response.statusCode}');
      }
    } catch (e) {
      print('üî• FCM: ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }
}
