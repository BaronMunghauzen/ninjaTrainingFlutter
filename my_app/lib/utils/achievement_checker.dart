import '../models/achievement_model.dart';
import '../services/achievement_service.dart';

class AchievementChecker {
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  static Future<List<AchievementModel>> checkAfterTraining({
    required int trainingDuration,
    required int exercisesCount,
    required DateTime trainingTime,
  }) async {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–£—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" –∏ —Ç.–¥.
      
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      return [];
    } catch (e) {
      print('Error checking achievements after training: $e');
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  static Future<List<AchievementModel>> checkAfterExercise({
    required String exerciseType,
    required int reps,
    required double weight,
    required int duration,
  }) async {
    try {
      // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
      // –ù–∞–ø—Ä–∏–º–µ—Ä, "100 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "10 –º–∏–Ω—É—Ç –ø–ª–∞–Ω–∫–∏" –∏ —Ç.–¥.
      
      return [];
    } catch (e) {
      print('Error checking achievements after exercise: $e');
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  static Future<List<AchievementModel>> checkStreakAchievements({
    required int currentStreak,
    required int longestStreak,
  }) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —Å–µ—Ä–∏–∏: "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", "30 –¥–Ω–µ–π" –∏ —Ç.–¥.
      
      return [];
    } catch (e) {
      print('Error checking streak achievements: $e');
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  static Future<List<AchievementModel>> checkTimeAchievements({
    required int totalTrainingHours,
    required int monthlyTrainingHours,
  }) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –≤—Ä–µ–º—è: "100 —á–∞—Å–æ–≤ –≤ –∑–∞–ª–µ", "50 —á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü" –∏ —Ç.–¥.
      
      return [];
    } catch (e) {
      print('Error checking time achievements: $e');
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  static Future<List<AchievementModel>> checkSocialAchievements({
    required int sharedWorkouts,
    required int receivedLikes,
    required int friendsCount,
  }) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è 20 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏", "100 –ª–∞–π–∫–æ–≤" –∏ —Ç.–¥.
      
      return [];
    } catch (e) {
      print('Error checking social achievements: $e');
      return [];
    }
  }

  // –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static Future<List<AchievementModel>> checkAllAchievements({
    Map<String, dynamic>? trainingData,
    Map<String, dynamic>? exerciseData,
    Map<String, dynamic>? socialData,
  }) async {
    try {
      final List<AchievementModel> newAchievements = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      if (trainingData != null) {
        final trainingAchievements = await checkAfterTraining(
          trainingDuration: trainingData['duration'] ?? 0,
          exercisesCount: trainingData['exercisesCount'] ?? 0,
          trainingTime: trainingData['time'] ?? DateTime.now(),
        );
        newAchievements.addAll(trainingAchievements);
      }

      if (exerciseData != null) {
        final exerciseAchievements = await checkAfterExercise(
          exerciseType: exerciseData['type'] ?? '',
          reps: exerciseData['reps'] ?? 0,
          weight: exerciseData['weight'] ?? 0.0,
          duration: exerciseData['duration'] ?? 0,
        );
        newAchievements.addAll(exerciseAchievements);
      }

      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      final uniqueAchievements = <String, AchievementModel>{};
      for (final achievement in newAchievements) {
        uniqueAchievements[achievement.uuid] = achievement;
      }

      return uniqueAchievements.values.toList();
    } catch (e) {
      print('Error checking all achievements: $e');
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
  static bool shouldShowAchievementNotification(AchievementModel achievement) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if (!achievement.isUnlocked || achievement.unlockedAt == null) {
      return false;
    }

    final now = DateTime.now();
    final unlockedTime = achievement.unlockedAt!;
    final difference = now.difference(unlockedTime);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    return difference.inHours < 24;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
  static String getAchievementNotificationText(AchievementModel achievement) {
    return 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.title}"!';
  }
}





